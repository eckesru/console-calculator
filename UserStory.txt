User Stories Console_Calculator

User Story Vorlage: Als <Rolle/Anwendertyp> möchte ich <Ziel/Wunsch/Funktion>, um <Nutzen>

Titel: Addieren
Story: Als Benutzer möchte ich zwei Zahlen eingeben, um deren Summe zu berechnen
Akzeptanzkriterien: 
	* Gleitkommazahlen zwischen -1000.00 und 1000.00 können addiert werden
Status:
	* Implementiert
	* Getestet
	* Erledigt

Titel: Starten
Story: Als Benutzer möchte ich den Taschenrechner schnell aufrufen können, um mein Ergebnis schnell zu bekommen
Akzeptanzkriterien: 
	* Die Anwendung wird innerhalb von zwei Sekunden auf dem Rechner gestartet
Status:
	* Implementiert
	* Getestet
	* Erledigt

Titel: Subtrahieren
Story: Als Benutzer möchte ich zwei Zahlen eingeben, um deren Differenz zu berechnen
Akzeptanzkriterien:
	* Gleitkommazahlen zwischen -1000.00 und 1000.00 können subtrahiert werden
Status:
	* Implementiert
	* Getestet
	* Erledigt

Titel: Softwarestruktur
Story: Als Entwickler möchte ich den Quellcode sauber strukturieren, um zukünftig einfach weitere Funktionen hinzfügen zu können
Akzeptanzkriterien:
	* Das Single Level of Abstraction Prinzip wird eingehalten und Abweichungen sind begründet und dokumentiert
Status:
	* Implementiert
	* Getestet
	* Erledigt

Titel: Multiplikation
Story: Als Benutzer möchte ich zwei Zahlen eingeben, um deren Produkt zu berechnen
Akzeptanzkriterien:
	* Gleitkommazahlen zwischen -1000.00 und 1000.00 können multipliziert werden
Status:
	* Implementiert
	* Getestet
	* Erledigt

Titel: Division
Story: Als Benutzer möchte ich zwei Zahlen eingeben, um deren Quotient zu berechnen
Akzeptanzkriterien:
	* Gleitkommazahlen zwischen -1000.00 und 1000.00 können dividiert werden
	* Implementiert
	* Getestet
	* Erledigt

Titel: Modulo
Story: Als Benutzer möchte ich zwei Zahlen eingeben, um die Division mit Rest zu berechnen
Akzeptanzkriterien:
	* Zu Gleitkommazahlen zwischen -1000.00 und 1000.00 kann der Divisionsrest berechnet werden
Status:
	* Implementiert
	* Getestet
	* Erledigt

Titel: ObjektOrientierung
Story: Als Entwickler möchte ich die Anwendung objektorientiert entwickeln, um später weitere Funktionalitäten hinzufügen zu können
Akzeptanzkriterien:
	* Die Aufteilung der Funktionalitäten auf Klassen folgt dem Prinzip Seperation of Concerns (SoC)
	* Bei der Erstellung von Klassen und Methoden wird das Prinzip Don't Repeat Yourself (DRY) eingehalten
Hinweis:
	* Diese User Story ist eine Erweiterung zu User Story "Softwarestruktur"
Status:
	* Implementiert
	* Getestet
	* Erledigt

Titel: Fortlaufende Berechnung
Story: Als Benutzer möchte ich eine weitere Zahl eingeben können, um eine neue Operation mit dem vorherigen Ergebnis durchzuführen
Akzeptanzkriterien:
	* Gleitkommazahlen zwischen -1000.00 und 1000.00 können eingegeben werden
	* Ein neuer Rechenoperator kann eingegeben werden
	* Das neue Ergebnis berücksichtigt das alte Ergebnis sowie die neuen Eingaben
Status:
	* Implementiert
	* Getestet
	* Erledigt

Titel: Beenden
Story: Als Benutzer möchte ich "Fertig" eingeben, um den Taschenrechner zu beenden.
Akzeptanzkrtierien:
	* Taschenrechner wird beendet, wenn "Ende" vom Benutzer eingeben wird
	* Es gibt hierzu einen Hinweis für den Benutzer
Status:
	* Implementiert
	* Getestet
	* Erledigt